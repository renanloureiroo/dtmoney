{"version":3,"sources":["service/api.ts","contexts/TransactionsContext.tsx","hooks/useTransactions.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","useEffect","get","then","response","data","createTransaction","transactionInput","a","post","transaction","status","Error","Provider","value","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withDraws","src","incomeIMG","alt","Intl","NumberFormat","style","currency","format","outcomeIMG","className","totalIMG","TransactionsTable","position","reverseOrder","map","title","category","DateTimeFormat","Date","createdAt","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoIMG","onClick","form","TransactionTypeContainer","colors","red","green","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setAmount","setCategory","handleCreateNewTransaction","event","preventDefault","toast","success","error","overlayClassName","closeIMG","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c067de53.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport const api = axios.create({\n  baseURL: \"http://localhost:3000/api\",\n})\n","import { createContext, ReactNode, useEffect, useState } from \"react\"\nimport { api } from \"../service/api\"\n\ninterface Transaction {\n  id: number\n  title: string\n  amount: number\n  category: string\n  type: string\n  createdAt: string\n}\n\n// interface TransactionInput {\n//   title: string\n//   amount: number\n//   category: string\n//   type: string\n// }\n\n// type TransactionInput = Omit<Transaction, \"id\" | \"createdAt\">\n\ntype TransactionInput = Pick<\n  Transaction,\n  \"title\" | \"amount\" | \"category\" | \"type\"\n>\n\ninterface TransactionsContextData {\n  transactions: Transaction[]\n  createTransaction: (transaction: TransactionInput) => Promise<void>\n}\n\ninterface TransactionsProviderProps {\n  children: ReactNode\n}\n\nexport const TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n)\n\nexport const TransactionsProvider = ({\n  children,\n}: TransactionsProviderProps) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  useEffect(() => {\n    api\n      .get(\"/transactions\")\n      .then((response) => setTransactions(response.data.transactions))\n  }, [])\n\n  const createTransaction = async (transactionInput: TransactionInput) => {\n    const response = await api.post(\"/transactions\", transactionInput)\n    const { transaction } = response.data\n    if (response.status !== 201) {\n      throw new Error(\"Erro!\")\n    }\n    setTransactions([...transactions, transaction])\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n}\n","import { useContext } from \"react\"\nimport { TransactionsContext } from \"../contexts/TransactionsContext\"\n\nexport const useTransactions = () => {\n  const context = useContext(TransactionsContext)\n\n  return context\n}\n","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\"\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--text-title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.highlight-color {\n      background: var(--green);\n      color: var(--shape);\n    }\n  }\n`\n","import { useTransactions } from \"../../hooks/useTransactions\"\n\nimport incomeIMG from \"../../assets/income.svg\"\nimport outcomeIMG from \"../../assets/outcome.svg\"\nimport totalIMG from \"../../assets/total.svg\"\n\nimport { Container } from \"./styles\"\n\nexport const Summary = () => {\n  const { transactions } = useTransactions()\n\n  const summary = transactions.reduce(\n    (acc, transaction) => {\n      if (transaction.type === \"deposit\") {\n        acc.deposits += transaction.amount\n        acc.total += transaction.amount\n      } else {\n        acc.withDraws += transaction.amount\n        acc.total -= transaction.amount\n      }\n\n      return acc\n    },\n    {\n      deposits: 0,\n      withDraws: 0,\n      total: 0,\n    }\n  )\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={incomeIMG} alt=\"Entradas\" />\n        </header>\n\n        <strong>\n          {Intl.NumberFormat(\"pt-BR\", {\n            style: \"currency\",\n            currency: \"BRL\",\n          }).format(summary.deposits)}\n        </strong>\n      </div>\n      <div>\n        <header>\n          <p>Saídas</p>\n          <img src={outcomeIMG} alt=\"saidas\" />\n        </header>\n\n        <strong>\n          {Intl.NumberFormat(\"pt-BR\", {\n            style: \"currency\",\n            currency: \"BRL\",\n          }).format(summary.withDraws)}\n        </strong>\n      </div>\n      <div className=\"highlight-color\">\n        <header>\n          <p>Total</p>\n          <img src={totalIMG} alt=\"total\" />\n        </header>\n\n        <strong>\n          {Intl.NumberFormat(\"pt-BR\", {\n            style: \"currency\",\n            currency: \"BRL\",\n          }).format(summary.total)}\n        </strong>\n      </div>\n    </Container>\n  )\n}\n","import styled from \"styled-components\"\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    tr {\n      border-radius: 0.25rem;\n    }\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n    td {\n      border: 0;\n      padding: 1rem 2rem;\n      background: var(--shape);\n      color: var(--text-body);\n\n      &:first-child {\n        color: var(--text-title);\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n  }\n`\n","import { useTransactions } from \"../../hooks/useTransactions\"\n\nimport { Toaster } from \"react-hot-toast\"\n\nimport { Container } from \"./styles\"\n\nexport const TransactionsTable = () => {\n  const { transactions } = useTransactions()\n\n  return (\n    <Container>\n      <Toaster position=\"top-right\" reverseOrder={false} />\n      <table>\n        <thead>\n          <tr>\n            <th>Título</th>\n            <th>Preço</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map((transaction) => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat(\"pt-BR\", {\n                  style: \"currency\",\n                  currency: \"BRL\",\n                }).format(transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>\n                {new Intl.DateTimeFormat(\"pt-BR\").format(\n                  new Date(transaction.createdAt)\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  )\n}\n","import styled from \"styled-components\"\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`\n","import { Summary } from \"../Summary\"\nimport { TransactionsTable } from \"../TransactionsTable\"\nimport { Container } from \"./styles\"\n\nexport const Dashboard = () => {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from \"styled-components\"\n\nexport const Container = styled.header`\n  background: var(--blue);\n`\n\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    background: var(--blue-light);\n    color: #ffffff;\n    border: 0;\n    border-radius: 0.25rem;\n    padding: 0 1rem;\n    height: 3rem;\n\n    transform: filter 0.2;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`\n","import logoIMG from \"../../assets/logo.svg\"\n\nimport { Container, Content } from \"./styles\"\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void\n}\n\nexport const Header = ({ onOpenNewTransactionModal }: HeaderProps) => {\n  return (\n    <Container>\n      <Content>\n        <img src={logoIMG} alt=\"dt money\" />\n\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transação\n        </button>\n      </Content>\n    </Container>\n  )\n}\n","import styled from \"styled-components\"\nimport { darken, transparentize } from \"polished\"\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n  input,\n  button[type=\"submit\"] {\n    width: 100%;\n    height: 4rem;\n    border-radius: 0.25rem;\n    padding: 0 1.5rem;\n    font-size: 1rem;\n  }\n\n  input {\n    background: #e7e9ee;\n    border: 1px solid #d7d7d7;\n    font-weight: 400;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type=\"submit\"] {\n    color: var(--shape);\n    background: var(--green);\n    border: 0;\n    font-weight: 600;\n    margin-top: 1.5rem;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`\n\ninterface RadioBoxProps {\n  isActive: boolean\n  activeColor: \"red\" | \"green\"\n}\n\nconst colors = {\n  red: \"#E52E4D\",\n  green: \"#33cc95\",\n}\nexport const RadioBox = styled.button<RadioBoxProps>`\n  height: 4rem;\n  padding: 0 1.5rem;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background: ${(props) =>\n    props.isActive\n      ? transparentize(0.8, colors[props.activeColor])\n      : \"transparent\"};\n\n  border: 1px solid #d7d7d7;\n  border-radius: 0.25rem;\n\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: ${darken(0.1, \"#d7d7d7\")};\n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import { FormEvent, useState } from \"react\"\nimport Modal from \"react-modal\"\nimport { Container, RadioBox, TransactionTypeContainer } from \"./styles\"\n\nimport incomeIMG from \"../../assets/income.svg\"\nimport outcomeIMG from \"../../assets/outcome.svg\"\nimport closeIMG from \"../../assets/close.svg\"\nimport toast from \"react-hot-toast\"\nimport { useTransactions } from \"../../hooks/useTransactions\"\ninterface NewTransactionModalProps {\n  isOpen: boolean\n  onRequestClose: () => void\n}\n\nexport const NewTransactionModal = ({\n  isOpen,\n  onRequestClose,\n}: NewTransactionModalProps) => {\n  const [type, setType] = useState(\"deposit\")\n  const [title, setTitle] = useState(\"\")\n  const [amount, setAmount] = useState(0)\n  const [category, setCategory] = useState(\"\")\n\n  const { createTransaction } = useTransactions()\n\n  const clearAndCloseForm = () => {\n    setTitle(\"\")\n    setAmount(0)\n    setCategory(\"\")\n    setType(\"deposit\")\n    onRequestClose()\n  }\n\n  const handleCreateNewTransaction = async (event: FormEvent) => {\n    event.preventDefault()\n\n    try {\n      await createTransaction({ title, amount: amount, category, type })\n      clearAndCloseForm()\n      toast.success(\"Sucesso\")\n    } catch (err) {\n      toast.error(\"Erro!\")\n    }\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal-content\"\n    >\n      <button\n        type=\"button\"\n        onClick={onRequestClose}\n        className=\"react-modal-close\"\n      >\n        <img src={closeIMG} alt=\"Fechar modal\" />\n      </button>\n\n      <Container onSubmit={handleCreateNewTransaction}>\n        <h2>Cadastrar transação</h2>\n\n        <input\n          placeholder=\"Título\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Valor\"\n          value={amount}\n          onChange={(event) => setAmount(Number(event.target.value))}\n        />\n        <TransactionTypeContainer>\n          <RadioBox\n            type=\"button\"\n            onClick={() => setType(\"deposit\")}\n            isActive={type === \"deposit\"}\n            activeColor=\"green\"\n          >\n            <img src={incomeIMG} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n\n          <RadioBox\n            type=\"button\"\n            onClick={() => setType(\"withdraw\")}\n            isActive={type === \"withdraw\"}\n            activeColor=\"red\"\n          >\n            <img src={outcomeIMG} alt=\"Saída\" />\n            <span>Saída</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n        <input\n          placeholder=\"Categoria\"\n          value={category}\n          onChange={(event) => setCategory(event.target.value)}\n        />\n\n        <button type=\"submit\">Cadastrar</button>\n      </Container>\n    </Modal>\n  )\n}\n","import { createGlobalStyle } from \"styled-components\"\n\nexport const GlobalStyle = createGlobalStyle`\n\n  :root {\n    --blue: #5429CC;\n    --red: #E52E4D;\n    --green: #33cc95;\n    \n    --blue-light: #6933FF;\n    \n    --text-title: #363F5F;\n    --text-body : #969CB2;\n    \n    --background: #F0F2F5;\n    --shape: #FFFFFF;\n  }\n\n  *{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%; //15px\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%; //14px\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1,h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled]{\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay{\n    background:rgba(0,0,0,0.5);\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content{\n    width: 100%;\n    max-width: 576px;\n\n    background: var(--background);\n    padding: 3rem;\n    border-radius: 0.25rem;\n    position: relative;\n  }\n\n  .react-modal-close{\n    position: absolute;\n    border: 0;\n    top: 1.5rem;\n    right: 1.5rem;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.7);\n    }\n  }\n`\n","import { useState } from \"react\"\nimport Modal from \"react-modal\"\nimport { Dashboard } from \"./components/Dashboard\"\nimport { Header } from \"./components/Header\"\nimport { NewTransactionModal } from \"./components/NewTransactionModal\"\nimport { TransactionsProvider } from \"./contexts/TransactionsContext\"\n\nimport { GlobalStyle } from \"./styles/global\"\n\nModal.setAppElement(\"#root\")\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] =\n    useState(false)\n\n  const handleOpenNewTransactionModal = () => {\n    setIsNewTransactionModalOpen(true)\n  }\n  const handleCloseNewTransactionModal = () => {\n    setIsNewTransactionModalOpen(false)\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n      <GlobalStyle />\n    </TransactionsProvider>\n  )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { createServer, Model } from \"miragejs\"\nimport { App } from \"./App\"\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: \"Freelancer\",\n          amount: 6000,\n          category: \"Dev\",\n          type: \"deposit\",\n          createdAt: new Date(\"11/23/2021 09:00:00\"),\n        },\n        {\n          id: 2,\n          title: \"Aluguel\",\n          amount: 1000,\n          category: \"Case\",\n          type: \"withdraw\",\n          createdAt: new Date(\"11/21/2021 17:00:00\"),\n        },\n      ],\n    })\n  },\n  routes() {\n    this.namespace = \"api\"\n    this.get(\"/transactions\", () => {\n      return this.schema.all(\"transaction\")\n    })\n    this.post(\"/transactions\", (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n\n      return schema.create(\"transaction\", { ...data, createdAt: new Date() })\n    })\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}